{"0": {"meta": {"StartDate": "2023-02-22 01:04:34", "EndDate": "2023-02-22 04:22:14", "Status": "IP Address", "Progress": "100", "Duration": "11860", "Finished": "True", "RecordedDate": "2023-02-22 04:22:15", "ResponseID": "R_2zinl69qCsTs95V", "UserLanguage": "EN"}, "general": {"G1": "The supply chain of CPS faces several challenges, including:\n\nUnavailability of the physical devise(s) or component(s):\nTesting, monitoring, and deploying CPS is challenging, and this is often due to the recurrent problem that the physical device (s) or component(s) are not available, or yet mature for testing purposes. Indeed, such components are often available only after the major release (still the system under test can be rather different that the one deployed in the customers side)\n\nLack of Standardization: CPS supply chains often use a wide range of technologies and standards, whit evolve over the time, making it challenging to ensure interoperability and compatibility across different components and vendors. This can lead to delays, increased costs, compatibility issues, and even physical crashes.\n\nEthical Concerns: CPS can collect and analyze vast amounts of data, raising ethical concerns about data privacy, surveillance, and the use of data for discriminatory or malicious purposes. While such data could be used for debugging purposes, they cannot easily accessed for the aforementioned reasons.\n\nRegulatory Compliance: CPS is subject to numerous regulations and standards, including cybersecurity, data privacy, and safety regulations. Meeting these requirements can be challenging, especially for small and medium-sized enterprises (SMEs) with limited resources.\n\nSecurity and SafetyRisks: CPS involve a vast network of connected devices, systems, and software, creating vulnerabilities for cyber attacks. Attackers can exploit weaknesses in the supply chain, including hardware, firmware, software, and network components, to compromise the entire system's security. We have seen how easy can be to attack cyber-physical systems in different ways and lead to harmful situations.\n\nProbably a couple of recent works can make some of such challenges more detailed:\n- Automated Identification and Qualitative Characterization of Safety Concerns Reported in UAV Software Platforms.    Transactions on Software Engineering and Methodology.\n- An Empirical Characterization of Software Bugs in Open-Source Cyber-Physical Systems.    Journal of Systems & Software (JSS). \n- Continuous Integration and Delivery practices for Cyber-Physical systems: An interview-based study.    Transactions on Software Engineering and Methodology.  \n", "G2": "CPS is a combination of physical systems and software systems that are interconnected and work together to perform complex tasks. \n\nOpen-source software plays a crucial role in the development, evolution, and even early implementation of cyber-physical systems (CPS) for beginners. Open-source software provides an affordable and accessible way to develop software systems that can be integrated with the physical systems in a CPS. It facilitates communities around the world to address the very same problems from a different perspective (or point of view). It is basically essential in both industry and academia.\n\nAnother advantage of open-source software for CPS is that it can be customized and modified to meet the specific needs of a CPS. \nIt allows developers and experts in other areas to collaborate and share their work, leading to the creation of more robust and efficient software systems. \n\nFurthermore, open-source software can also help to reduce the cost of developing and implementing CPS. It allows developers to reuse code and avoid costly licensing fees. This can help to accelerate the development and deployment of CPS and make them more accessible to a wider range of users. I have seen this done by many large open-source CPS communities (ROS, Gazebo, etc.).\n"}, "sbom_background": {"SB1": "No"}, "hbom_background": {"HB1": "No", "HB2": "", "HB3": {"answers": [""], "other": ""}}, "likert": {"L1": "Agree", "L2": "Agree", "L3": "Disagree", "L4": "Neutral", "L5": "Strongly agree", "L6": "Disagree"}, "open": {"O1": "This inventory typically (or should) contain specific data fields to accurately and sufficiently describe the components of the system.\nThe following are some of the necessary data fields that an SBOM/HBOM must contain:\n1. Component name: The name of the software/hardware component must be clearly specified to enable identification and tracking.\n2. Version: The version number of the component must be included as it helps in tracking the changes and updates made to the component.\n3. Vendor: The name of the vendor who supplies the component must be specified to enable the sourcing of components and tracking of potential vulnerabilities.\n4. Licensing information: The type of licensing agreement, terms, and restrictions must be provided to ensure compliance and to avoid legal issues.\n5. Dependencies: The dependencies between software/hardware components must be specified to enable the identification of any security or compatibility issues.\n6. Functionality: The intended functionality of the component must be specified to ensure that it meets the system's requirements and objectives.\n7. Source code location: The location of the source code must be included to facilitate tracking of any changes made to the code and for debugging purposes.\n8. Security vulnerabilities: Any known security vulnerabilities or potential risks associated with the component must be listed to ensure that they are addressed during development and testing.\n9. Testing and quality assurance data: The results of testing and quality assurance checks must be included to ensure that the component meets the required standards and specifications.\n10. Deployment information: Information about how the component is deployed, configured, and integrated with other components must be included to ensure that it works properly in the system.\n\nIn this context, challenges related to the development, testing, and deployment of software and hardware components include version control, compatibility issues, security risks, and compliance with regulations and standards. To address these challenges, it is important to maintain accurate and up-to-date SBOM/HBOM that contains all the necessary data fields mentioned above. This can help in ensuring that the components are developed, tested, and deployed successfully, and any issues can be identified and addressed promptly.", "O2": "As mentioned before, in this context, challenges related to the development, testing, and deployment of software and hardware components include version control, compatibility issues, security risks, and compliance with regulations and standards. To address these challenges, it is important to maintain accurate and up-to-date SBOM/HBOM that contains all the necessary data fields mentioned above. This can help in ensuring that the components are developed, tested, and deployed successfully, and any issues can be identified and addressed promptly.\n\nHence, while traceability in CPS is important, SBOMs/HBOMs are essential to it.", "O3": "Overall, the use of an SBOM or HBOM can help in better understanding and mitigating the risks associated with cyber-physical systems, by improving visibility, accuracy, planning, and incident response as well as securing critical infrastructure and protecting against cyber attacks.\nSpecifically, the use of an SBOM or HBOM can provide better visibility into the components of a cyber-physical system. This can help identify potential vulnerabilities and weaknesses that could be exploited by cyber attackers. With an SBOM or HBOM in place, risk assessments can be more accurate and comprehensive (this can help identify areas where where vulnerabilities need to be fixed).\nAn SBOM or HBOM can help organizations plan their cybersecurity strategy more effectively. By identifying potential vulnerabilities early on, organizations can take steps to mitigate risks before they become major problems. Complementary, with an SBOM or HBOM in place, incident response teams can more quickly and effectively respond to incidents. They can quickly identify the source of the problem and take steps to address it.", "O4": {"1": "5", "2": "1", "3": "2", "4": "4", "5": "3", "6": "6", "other": "In general available as open source software/data, if possible."}, "O5": ""}, "demographics": {"D1": "16", "D2": "Senior computer science researcher", "D3": {"answers": "Doctoral Degree", "other": ""}, "D4": {"answers": ["Python", "Java", "C / C++", "Others"], "other": "R"}, "D5": "Development and testing tools/framework for a software system, CPS, and AI-based systems.", "D6": "Systems in Aviation, Utility, Automotive, E-health, Aerospace, Autonomous systems in general.", "D7": "Yes, informal", "D8": "Yes, informal", "D9": "Monthly"}}, "1": {"meta": {"StartDate": "2023-03-02 04:09:41", "EndDate": "2023-03-02 05:21:14", "Status": "IP Address", "Progress": "100", "Duration": "4293", "Finished": "True", "RecordedDate": "2023-03-02 05:21:15", "ResponseID": "R_Q6uylZurlC8qlHj", "UserLanguage": "EN"}, "general": {"G1": "The main challenges that people currently face is related to security. In nowadays we are in world where the information is critical and thus cyber security is on of the key parts in any cyber-physical systems. \nAdditionally due to the complexity that the systems now tend to be, not only to make sure that the software is protected but the components of any cyber-physical system are being more complex which may lead to a need for specialized people to manage these CPS.", "G2": "One of the main reasons for the open-source is the cost, as it tends to be a big factor for the companies. Also related to the previous question, one major role for the open-source and with the risk of cyber attacks, an open-source software is more \"trustable\" than a black box software. Thus, these two reasons complement each others."}, "sbom_background": {"SB1": "No"}, "hbom_background": {"HB1": "No", "HB2": "", "HB3": {"answers": [""], "other": ""}}, "likert": {"L1": "Agree", "L2": "Agree", "L3": "Neutral", "L4": "Agree", "L5": "Agree", "L6": "Neutral"}, "open": {"O1": "First there should be a unique identification for each SBOM or HBOM and it should be clear enough to understand what it does.\nAlso, we should always have available which version of the SBOM or HBOM we are currently using. Also if it is necessary to install any other SBOM or HBOM to be able to use the one we select or need.", "O2": "As it is known which SBOM or HBOM is related to (due to the versioning and dependencies) it allows the ability to back track from which component or line of code a specific development or issue is related.", "O3": "SBOMs/HBOMs can provide an improved visibility into the components. \nThis leads to a more accurate and comprehensive risk assessments by identifying potential vulnerabilities", "O4": {"1": "5", "2": "1", "3": "3", "4": "4", "5": "2", "6": "6", "other": "Have backup in a different location"}, "O5": ""}, "demographics": {"D1": "20", "D2": "Software Developer", "D3": {"answers": "Bachelor's Degree", "other": ""}, "D4": {"answers": ["Python"], "other": ""}, "D5": "embebbed", "D6": "defense", "D7": "Yes, informal", "D8": "Yes, informal", "D9": "Annually"}}, "2": {"meta": {"StartDate": "2023-03-03 08:47:39", "EndDate": "2023-03-03 09:16:06", "Status": "IP Address", "Progress": "100", "Duration": "1706", "Finished": "True", "RecordedDate": "2023-03-03 09:16:07", "ResponseID": "R_2ZJoneTkc1V8HhF", "UserLanguage": "EN"}, "general": {"G1": "So I mean, it all depends on what you mean by cyber-physical systems.  If we use NIST's definition - \"Tightly coupled cyber and physical systems that exhibit this level of integrated intelligence are sometimes referred to as cyber-physical systems (CPS)\" - then we're mostly talking about systems that most people would call \"robots\" or \"automated systems\".  Manufacturing robots are a good example, or self-driving cars, but also commodity electronics such as refrigerators or washing machines that have some level of software built in.  \n\nSo, when we talk about those kinds of devices, we have to acknowledge the kinds of supply chains that exist.  First, hardware supply chains.  Any such device will have some kind of standard commodity electronics, such as a processor (CPU/GPU), RAM, motherboard, and then some set of actuators that allow it to translate the software commands into physical motion of some kind.  Considering those components, the first major thing that comes to mind in terms of challenges is availability.  Ever since the pandemic, there has been a \"chip\" shortage, especially for less advanced commodity components (i.e. not a cutting edge Intel/AMD processor, but the kind of chip that would go into your car or washer).  This is why the CHIPS act happened, and other countries/organizations are taking similar steps (such as the EU).  I do believe there was a period where RAM was harder to get, but I believe that abated.  Similarly, I'm not familiar with any actuator shortages.  Which then brings me to the supply chain challenge of reliability.  What commonly happens, especially with commodity components, is the proliferation of sub-standard/knock-off electronics, especially on sites like Amazon.  And then there's the potential for intentional subversion, such as the story about how China planted a \"spy chip\" into Supermicro motherboards.  I don't think we ever got a full public resolution on that, and even if it didn't happen, it would be a potential issue to worry about from a supply chain standpoint.\n\nNow, software supply chains.  So we're talking about the software that runs on the electronic components that commands the actuators to make the physical actions that the device/platform/robot is intended for.  Now, modern software stacks are quite complex, and for any given commodity device from washers up to self-driving cars, there's going to be at least some mix of proprietary and OSS software in the mix.  From a supply chain standpoint, this really means you have 2 concerns - how secure/reliable is the proprietary software (e.g., how much do you trust the vendor, do they have any recent issues); and how secure/reliable is the OSS (e.g. are you going to examine the code yourself, are there recent vulnerabilities that have been found (zero days or what have you), how often does the code base get updated, is there active development going on to keep the software secure).", "G2": "Mainly, to provide the general-purpose infrastructure on which the system-specific code rides.  E.g., the OS, virtualization/containerization, messaging middleware, database management."}, "sbom_background": {"SB1": "No"}, "hbom_background": {"HB1": "Yes", "HB2": "No", "HB3": {"answers": [""], "other": ""}}, "likert": {"L1": "Agree", "L2": "Neutral", "L3": "", "L4": "Agree", "L5": "Agree", "L6": "Neutral"}, "open": {"O1": "HBOM:\n- Part #s\n- Vendor\n- Date/Place of Manufacture\n\nSBOM:\n- Every library used\n- Library versions\n- Library checksum for confirmation\n- Relevant licensing", "O2": "Exactly that - regardless of the component type, you should be able to understand where it came from, when it was produced, and what it is intended to do.", "O3": "Well, if you make it into a digital list that can be automatically processed, and you also have a SBOM/HBOM program that checks it against an allowlist and/or a blocklist, you can automate the verification that a given device has validated and/or questionable components.", "O4": {"1": "2", "2": "1", "3": "3", "4": "5", "5": "4", "6": "6", "other": "In multiple formats (JSON/XML)"}, "O5": "It's a noble pursuit, but the granularity required to make it effective would require a pretty detailed specification that without external impetus, most vendors are likely to ignore.  It would need to be an accepted standard to work.  Presumably this is where your work is going."}, "demographics": {"D1": "23", "D2": "Principal Engineer", "D3": {"answers": "Master's Degree", "other": ""}, "D4": {"answers": ["Java", "C / C++"], "other": ""}, "D5": "Cyberphysical", "D6": "DoD", "D7": "Yes, informal", "D8": "Yes, informal", "D9": "Annually"}}, "3": {"meta": {"StartDate": "2023-03-03 12:48:55", "EndDate": "2023-03-03 12:59:36", "Status": "IP Address", "Progress": "100", "Duration": "641", "Finished": "True", "RecordedDate": "2023-03-03 12:59:38", "ResponseID": "R_qDBtljCBmUcakfv", "UserLanguage": "EN"}, "general": {"G1": "It is hard to validate the code and solution developed by other groups. Repeatability is low. ", "G2": "Open-source software could encourage innovation by allowing more people to participate in the innovation cycle. "}, "sbom_background": {"SB1": "No"}, "hbom_background": {"HB1": "No", "HB2": "", "HB3": {"answers": [""], "other": ""}}, "likert": {"L1": "Agree", "L2": "Agree", "L3": "", "L4": "Strongly agree", "L5": "Agree", "L6": "Neutral"}, "open": {"O1": "The application requirements; the system resource requirements; the language versions; the context for the validation tests; the limitations;", "O2": "the role will be essential; ", "O3": "It will reduce the risk since everything is standard and well-defined.", "O4": {"1": "1", "2": "4", "3": "3", "4": "5", "5": "2", "6": "6", "other": "possibility to be an industry standard for CPS"}, "O5": "I look forward to learning more about it and potentially using it."}, "demographics": {"D1": "20", "D2": "professor", "D3": {"answers": "Doctoral Degree", "other": ""}, "D4": {"answers": ["Java", "C / C++"], "other": ""}, "D5": "linux, tinyos,windows", "D6": "smart health", "D7": "Yes, informal", "D8": "Yes, informal", "D9": "Annually"}}, "4": {"meta": {"StartDate": "2023-03-06 08:15:03", "EndDate": "2023-03-06 09:33:03", "Status": "IP Address", "Progress": "100", "Duration": "4680", "Finished": "True", "RecordedDate": "2023-03-06 09:33:04", "ResponseID": "R_1pX0SF2vnkXOhJ0", "UserLanguage": "EN"}, "general": {"G1": "Depends on the kind and complexity of CPS. For example, production or power plants can be regarded as CPS, too. The supply chain of such CPS is much more challenging than for, e.g., measuring devices. \nThe more individual CPS are, the more challenging the supply chain is in terms of identifying possible CPS that match the requirements and can be integrated in specified environment (e.g., w.r.t. interfaces, safety levels, parameterization).", "G2": "It again depends on the kind of CPS but, in general, OSS gets more important. Customers of CPS are usually interested in open source software due to its openness. In contrast, producers of CPS sometimes tend to stick to closed ecosystems at the moment. However, it is expected that they need to change. "}, "sbom_background": {"SB1": "No"}, "hbom_background": {"HB1": "Yes", "HB2": "Yes", "HB3": {"answers": ["Others (Please specify)"], "other": "proprietary"}}, "likert": {"L1": "Strongly agree", "L2": "Strongly agree", "L3": "", "L4": "Disagree", "L5": "Agree", "L6": "Disagree"}, "open": {"O1": "'- SW version\n- Dependencies on other SW components, containers, libraries, interface versions\n- Expectations w.r.t. environment: which services should be available, is it a secure environment,...\n- used HW (\"version\")\n- which tools are used for developing / configuring / operating / maintaining the SW and HW in general (including SW operation system, development tools, expected physical environment etc.)\n", "O2": "SBOMs / HBOMs make sure that any dependencies are documented for CPS. ", "O3": "Risks are reduced w.r.t. software clearing / licenses, safety and security levels, maintainability / update / upgrade of systems  ", "O4": {"1": "3", "2": "2", "3": "4", "4": "5", "5": "1", "6": "6", "other": "CPS might give the information by themselves"}, "O5": ""}, "demographics": {"D1": "20", "D2": "Project lead", "D3": {"answers": "Master's Degree", "other": ""}, "D4": {"answers": ["Java", "C / C++", "C#"], "other": ""}, "D5": "Automation systems", "D6": "industrial automation", "D7": "No", "D8": "No", "D9": "Never"}}, "5": {"meta": {"StartDate": "2023-03-22 05:34:56", "EndDate": "2023-03-22 06:05:01", "Status": "IP Address", "Progress": "100", "Duration": "1804", "Finished": "True", "RecordedDate": "2023-03-22 06:05:01", "ResponseID": "R_OIgOXD3brCG1k0p", "UserLanguage": "EN"}, "general": {"G1": "Lack of parts supply", "G2": "Aiding the process of development and testing of CPSs"}, "sbom_background": {"SB1": "Yes"}, "hbom_background": {"HB1": "Yes", "HB2": "Yes", "HB3": {"answers": ["Others (Please specify)"], "other": "CSV"}}, "likert": {"L1": "Agree", "L2": "Strongly agree", "L3": "", "L4": "Strongly agree", "L5": "Agree", "L6": "Strongly agree"}, "open": {"O1": "HBOM:  Part Name, Part Number, Vendor, Version, Price, URL, Quantity, Packaging, Description, Notes\n\nSBOM: Name, Vendor, Version, Price, URL, Licence, Description, Notes\n\n", "O2": "As an active role as it keeps track of the vendor and versions used in the CPS", "O3": "Allow to identify if any used component has any known vulnerability", "O4": {"1": "6", "2": "4", "3": "3", "4": "2", "5": "5", "6": "1", "other": "In a commercial product the distribution of HBOM is not desirable"}, "O5": ""}, "demographics": {"D1": "10", "D2": "Senior developer", "D3": {"answers": "Master's Degree", "other": ""}, "D4": {"answers": ["Python", "Java", "C / C++", "Javascript"], "other": ""}, "D5": "Gateways, Sensores, System integrations", "D6": "Internet of Things, Industry", "D7": "Yes, informal", "D8": "Yes, informal", "D9": "More frequently"}}}